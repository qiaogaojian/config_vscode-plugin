include:
# external
  - project: 'omniverse/devplat/gitlab/templates/runners'
    file: 'modules/include.yml'
    ref: v1_latest
  - project: 'omniverse/devplat/gitlab/templates/common/utilities'
    file: 'modules/include.yml'
    ref: v1_latest
  - project: 'omniverse/sectools/vault'
    file: ['templates/v2/omni-codesign-creds.yml', 'templates/v3/linux/codesign.gitlab-ci.yml']
  - project: 'omniverse/sectools/vault'
    file: ['templates/v2/windows/repo-codesign-creds.yml', 'templates/v3/windows/codesign.gitlab-ci.yml']
  - project: 'omniverse/sectools/vault'
    file: ['templates/v2/omni-packman-s3-creds.yml', 'templates/v3/linux/packman_s3.gitlab-ci.yml']
  - project: 'omniverse/sectools/vault'
    file: ['templates/v2/windows/packman-s3-creds.gitlab-ci.yml', 'templates/v3/windows/packman_s3.gitlab-ci.yml']
  - project: 'omniverse/devplat/gitlab/templates/common/kit-extension'
    file: 'modules/common.yml'



# ==============================================================================================================
stages:
  - check
  - build


# ==============================================================================================================
# Default values applied to all jobs
default:
  # Only retry on Gitlab failures (not on script failures for example)
  retry:
    max: 2
    when:
      - api_failure
      - runner_system_failure
      - stuck_or_timeout_failure
      - scheduler_failure
      - unknown_failure

workflow:
  auto_cancel:
    on_new_commit: interruptible
    on_job_failure: all
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      auto_cancel:
        on_new_commit: conservative
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_PROTECTED
      auto_cancel:
        on_new_commit: none
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_REF_PROTECTED
      auto_cancel:
        on_new_commit: none



# ==============================================================================================================
# More variables can be found in common.yml - here we put the ones controlling the jobs workflow
variables:
  OSEC_NSPECT_ID: "NSPECT-8CX1-LP1G"
  OSEC_CHECKMARX_ENABLED: 'false'
  OSEC_GITLAB_SAST_ENABLED: 'false'
  OSEC_PULSE_TRUFFLEHOG_ENABLED: 'false'
  OSEC_OMNI_PULSE_ENABLED: 'false'
  OSEC_README_ENABLED: 'false' # WARNING: Also have the init() function get_nspectid_from_repo_toml() in there...
  ALLOW_PUBLISH_DOCS:
    value: "false"
    description: "Set to true to publish docs"
  ALLOW_PUBLISH_TO_LAUNCHER:
    value: "false"
    description: "Set to true to for Kit apps that are published to the Launcher. That adds jobs for that."
  ALLOW_PUBLISH_EXTENSIONS:
    value: "false"
    description: "Set to true to publish extension updates."
  ALLOW_PUBLISH_CONTAINERS:
    value: "false"
    description: "Set to true to publish containers to NGC."
  ALLOW_SECURITY_SCAN:
    value: "false"
    description: "Set to true to trigger a security scan as a child pipeline (non blocking)"
  ALLOW_SCHEDULE_PIPELINE:
    value: "true"
    description: "Set to 'false' to disable schedule pipeline on a all jobs, useful to set it back on only some jobs."
  ALLOW_TAG_PIPELINE:
    value: "true"
    description: "Set to 'false' to disable tag pipeline on a all push jobs."
  RUN_EXTENSION_BENCHMARKS:
    value: "false"
    description: "Set to true to run benchmarks for kit extensions."
  RUN_ETM_TESTS:
    value: "false"
    description: "Set to true to run ETM tests for kit extensions. Only happens on push (extensions need to be published first)."
  DATADOG_TEST_VISIBILITY:
    value: "false"
    description: "Set to false to skip sending tests results to Datadog (internal)"
  OMNI_CI_ENABLE_CXX_COVERAGE:
    value: "false"
    description: "Set to 'true' to enable C++ code coverage testing."
  OMNI_CI_ENABLE_SANITIZERS:
    value: "false"
    description: "Set to 'true' to enable C++ sanitizer builds."
  RUN_BUMP_VERSION:
    value: "false"
    description: "Set to true to run bump version. Only happens on schedule."
  RUN_NIGHTLY_TESTS:
    value: "false"
    description: "Set to true to run nightly tests. Only happens on schedule."
  RUN_DOCS_BUILD:
    value: "false"
    description: "Set to true to build omni docs. Only happens on schedule."


# ==============================================================================================================
.check-common:
  stage: check
  timeout: 20 minutes
  interruptible: true
  rules:
  # - if: $RUN_BUMP_VERSION == "true"
  #   when: never
    - !reference [.rules-workflow, rules]

.repo-artifacts:
  artifacts:
    when: always
    expire_in: 2 weeks
    paths:
      - _repo/repo.log
      - _repo/repolog*.txt


# ==============================================================================================================
# Job that ensures that the MR has a JIRA ticket reference in the title
check-jira-ticket:
  extends:
    - .check-common
    - .check-jira-ticket
    - .omni_nvks_runner
  allow_failure: true
  rules:
    - !reference [.rules-mr, rules]


# ==============================================================================================================
# Job to dump out the current configuration environment variables
dump-env-vars:
  extends:
    - .check-common
    - .dump-env-vars
    - .omni_nvks_runner
  allow_failure: true
  when: manual
  rules:
    - !reference [.rules-workflow, rules]


# ==============================================================================================================
.build-artifacts:
  artifacts:
    when: always
    expire_in: 2 weeks
    paths:
      - isaacsim-vscode-edition-*.vsix
      - out/**


# ==============================================================================================================
.build-common:
  stage: build
  timeout: 1.5 hours
  interruptible: true
  extends:
    - .build-artifacts
  retry:
    max: 2
    when:
      - always
  rules:
    - !reference [.rules-workflow, rules]


# ==============================================================================================================
build-all:
  extends:
    - .build-common
    - .runner-build-linux-x86_64
    - .osec:vault:v3:prod_token_job
  before_script:
    - set -eu
    - yum install -y bsdtar
    - yum install -y rdfind
    - yum install -y nodejs npm --enablerepo=epel
    - !reference [.osec:vault:v3:linux, packman_s3:perform_vault_requests]
  script:
    - npm install
    - npm install -g @vscode/vsce
    - vsce package
