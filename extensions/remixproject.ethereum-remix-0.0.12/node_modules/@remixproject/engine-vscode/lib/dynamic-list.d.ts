import { Plugin, PluginOptions } from '@remixproject/engine';
import { TreeDataProvider, EventEmitter, TreeView, TreeItem } from 'vscode';
declare type ID = string | number;
export declare class Item<I> extends TreeItem {
    private item;
    constructor(label: string, pluginName: string, item: I);
}
export declare class List<I> implements TreeDataProvider<I> {
    private name;
    private list;
    private options;
    render: EventEmitter<I>;
    onDidChangeTreeData: import("vscode").Event<I>;
    constructor(name: string, initial?: I[]);
    setOptions(options: Partial<ListOptions>): void;
    reset(list: I[]): void;
    getParent(): any;
    getTreeItem(element: I): Item<I>;
    getChildren(): I[];
}
export interface ListOptions {
    idKey: string;
    labelKey: string;
}
export declare type ListPluginOptions = PluginOptions & ListOptions;
export declare class DynamicListPlugin<I, T extends List<I> = List<I>> extends Plugin {
    private listeners;
    protected options: ListPluginOptions;
    protected treeView: TreeView<I>;
    protected entities: Record<string, I>;
    protected selected: ID;
    list: T;
    constructor(name: string, options?: Partial<ListPluginOptions>);
    setOptions(options: Partial<ListPluginOptions>): void;
    activate(): void;
    deactivate(): void;
    getIds(): string[];
    getItem(id: ID): I;
    getAll(): I[];
    /** Select on element of the list */
    select(idOrItem: ID | I): void;
    /** Reset the entire list */
    reset(items: I[]): void;
    /** Add a new item to the list */
    add(item: I): void;
    /** Remove one item from the list */
    remove(id: ID): void;
    /** Update one item in the list */
    update(id: ID, item: Partial<I>): void;
}
export {};
