"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicListPlugin = exports.List = exports.Item = void 0;
const engine_1 = require("@remixproject/engine");
const vscode_1 = require("vscode");
//////////
// ITEM //
//////////
class Item extends vscode_1.TreeItem {
    constructor(label, pluginName, item) {
        super(label);
        this.item = item;
        this.command = {
            title: 'Select',
            command: `${pluginName}.select`,
            arguments: [this.item]
        };
    }
}
exports.Item = Item;
////////////////////////
// LIST DATA PROVIDER //
////////////////////////
class List {
    constructor(name, initial = []) {
        this.name = name;
        this.options = { idKey: 'id', labelKey: 'label' };
        this.render = new vscode_1.EventEmitter();
        this.onDidChangeTreeData = this.render.event;
        this.list = initial;
    }
    setOptions(options) {
        this.options = Object.assign(Object.assign({}, this.options), options);
        this.render.fire(undefined);
    }
    reset(list) {
        this.list = list;
        this.render.fire(undefined);
    }
    getParent() {
        return undefined; // Needed for "[TreeView].reveal"
    }
    getTreeItem(element) {
        if (element) {
            const label = element[this.options.labelKey];
            const item = new Item(label, this.name, element);
            return item;
        }
    }
    getChildren() {
        return this.list;
    }
}
exports.List = List;
const methods = ['getIds', 'getItem', 'getAll', 'reset', 'select', 'add', 'remove', 'update'];
class DynamicListPlugin extends engine_1.Plugin {
    constructor(name, options) {
        super({ name, methods });
        this.listeners = [];
        this.setOptions(Object.assign({ idKey: 'id', labelKey: 'label' }, options));
    }
    setOptions(options) {
        super.setOptions(options);
        if (this.list) {
            const { idKey, labelKey } = this.options;
            this.list.setOptions({ idKey, labelKey });
        }
    }
    activate() {
        if (!this.list) {
            this.list = new List(this.profile.name);
        }
        const { idKey, labelKey } = this.options;
        this.list.setOptions({ idKey, labelKey });
        this.treeView = vscode_1.window.createTreeView(`${this.profile.name}`, { treeDataProvider: this.list });
        this.listeners = [
            this.treeView,
            vscode_1.commands.registerCommand(`${this.profile.name}.select`, item => this.select(item)),
            vscode_1.commands.registerCommand(`${this.profile.name}.reset`, items => this.reset(items)),
            vscode_1.commands.registerCommand(`${this.profile.name}.add`, item => this.add(item)),
            vscode_1.commands.registerCommand(`${this.profile.name}.remove`, (id) => this.remove(id)),
            vscode_1.commands.registerCommand(`${this.profile.name}.update`, (id, item) => this.update(id, item)),
        ];
        super.activate();
    }
    deactivate() {
        super.deactivate();
        this.listeners.forEach(listener => listener.dispose());
    }
    getIds() {
        return Object.keys(this.entities);
    }
    getItem(id) {
        return this.entities[id];
    }
    getAll() {
        return this.getIds().map(id => this.getItem(id));
    }
    /** Select on element of the list */
    select(idOrItem) {
        const item = (typeof idOrItem === 'object')
            ? idOrItem
            : this.entities[idOrItem];
        this.treeView.reveal(item, { select: true, focus: true, expand: false });
        this.emit('selected', item);
        this.emit('change', this.getAll());
    }
    /** Reset the entire list */
    reset(items) {
        this.entities = {};
        items.forEach((item, i) => {
            const id = this.options.idKey ? (item[this.options.idKey] || i) : i;
            this.entities[id] = item;
        });
        this.list.reset(items);
        this.emit('reset', items);
        this.emit('change', items);
    }
    /** Add a new item to the list */
    add(item) {
        const id = item[this.options.idKey];
        this.entities[id] = item;
        const all = this.getAll();
        this.list.reset(all);
        this.emit('added', item);
        this.emit('change', all);
    }
    /** Remove one item from the list */
    remove(id) {
        delete this.entities[id];
        const all = this.getAll();
        this.list.reset(all);
        this.emit('removed', id);
        this.emit('change', all);
    }
    /** Update one item in the list */
    update(id, item) {
        this.entities[id] = Object.assign(Object.assign({}, this.entities[id]), item);
        this.emit('updated', this.entities[id]);
        this.emit('change', this.getAll());
    }
}
exports.DynamicListPlugin = DynamicListPlugin;
//# sourceMappingURL=dynamic-list.js.map