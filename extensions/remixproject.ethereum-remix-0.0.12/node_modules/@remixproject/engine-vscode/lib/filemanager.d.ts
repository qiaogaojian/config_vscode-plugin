import { IFileSystem } from '@remixproject/plugin-api';
import { MethodApi } from '@remixproject/plugin-utils';
import { CommandPlugin } from './command';
export declare class FileManagerPlugin extends CommandPlugin implements MethodApi<IFileSystem> {
    constructor();
    /** Open the content of the file in the context (eg: Editor) */
    open(path: string): Promise<void>;
    /** Set the content of a specific file */
    writeFile(path: string, data: string): Promise<void>;
    /** Return the content of a specific file */
    readFile(path: string): Promise<string>;
    /** Remove a file */
    remove(path: string): Promise<void>;
    /** Change the path of a file */
    rename(oldPath: string, newPath: string): Promise<void>;
    /** Upsert a file with the content of the source file */
    copyFile(src: string, dest: string): Promise<void>;
    /** Create a directory */
    mkdir(path: string): Promise<void>;
    /** Get the list of files in the directory */
    readdir(path: string): Promise<string[]>;
    getCurrentFile(): Promise<any>;
    logMessage(message: any): void;
    getFile: (path: string) => Promise<string>;
    setFile: (path: string, data: string) => Promise<void>;
    switchFile: (path: string) => Promise<void>;
    /** @deprecated Use readdir instead */
    getFolder(path: string): Promise<any>;
}
