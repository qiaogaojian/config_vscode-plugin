"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileManagerPlugin = void 0;
const tslib_1 = require("tslib");
const plugin_api_1 = require("@remixproject/plugin-api");
const vscode_1 = require("vscode");
const command_1 = require("./command");
const path_1 = require("../util/path");
const editor_1 = require("../util/editor");
class FileManagerPlugin extends command_1.CommandPlugin {
    constructor() {
        super(plugin_api_1.filSystemProfile);
        // ------------------------------------------
        // Legacy API. To be removed.
        // ------------------------------------------
        this.getFile = this.readFile;
        this.setFile = this.writeFile;
        this.switchFile = this.open;
    }
    /** Open the content of the file in the context (eg: Editor) */
    open(path) {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const absPath = path_1.absolutePath(path);
            const uri = vscode_1.Uri.file(absPath);
            return vscode_1.commands.executeCommand('vscode.open', uri, { viewColumn: (((_a = editor_1.getOpenedTextEditor()) === null || _a === void 0 ? void 0 : _a.viewColumn) || vscode_1.ViewColumn.One) });
        });
    }
    /** Set the content of a specific file */
    writeFile(path, data) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const absPath = path_1.absolutePath(path);
            const uri = vscode_1.Uri.file(absPath);
            const encoder = new TextEncoder();
            const uint8Array = encoder.encode(data);
            this.logMessage(' is modifying ' + path);
            return vscode_1.workspace.fs.writeFile(uri, Uint8Array.from(uint8Array));
        });
    }
    /** Return the content of a specific file */
    readFile(path) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const absPath = path_1.absolutePath(path);
            const uri = vscode_1.Uri.file(absPath);
            return vscode_1.workspace.fs.readFile(uri).then(content => Buffer.from(content).toString("utf-8"));
        });
    }
    /** Remove a file */
    remove(path) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const absPath = path_1.absolutePath(path);
            const uri = vscode_1.Uri.file(absPath);
            this.logMessage(' is removing ' + path);
            return vscode_1.workspace.fs.delete(uri);
        });
    }
    /** Change the path of a file */
    rename(oldPath, newPath) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const source = vscode_1.Uri.file(path_1.absolutePath(oldPath));
            const target = vscode_1.Uri.file(path_1.absolutePath(newPath));
            this.logMessage(' is renaming ' + oldPath + ' to ' + newPath);
            return vscode_1.workspace.fs.rename(source, target);
        });
    }
    /** Upsert a file with the content of the source file */
    copyFile(src, dest) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const source = vscode_1.Uri.file(path_1.absolutePath(src));
            const target = vscode_1.Uri.file(path_1.absolutePath(dest));
            return vscode_1.workspace.fs.copy(source, target);
        });
    }
    /** Create a directory */
    mkdir(path) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const uri = vscode_1.Uri.file(path_1.absolutePath(path));
            this.logMessage(' is creating ' + path);
            return vscode_1.workspace.fs.createDirectory(uri);
        });
    }
    /** Get the list of files in the directory */
    readdir(path) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const absPath = path_1.absolutePath(path);
            const uri = vscode_1.Uri.file(absPath);
            return vscode_1.workspace.fs.readDirectory(uri).then(data => data.map(([path]) => path));
        });
    }
    getCurrentFile() {
        var _a, _b;
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const fileName = (((_b = (_a = editor_1.getOpenedTextEditor()) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.fileName) || undefined);
            if (!fileName)
                throw new Error("No current file found.");
            return path_1.relativePath(fileName);
        });
    }
    logMessage(message) {
        if (this.currentRequest && this.currentRequest.from)
            vscode_1.window.showInformationMessage(this.currentRequest.from + message);
    }
    /** @deprecated Use readdir instead */
    getFolder(path) {
        throw new Error('Get folder is not supported anymore');
    }
}
exports.FileManagerPlugin = FileManagerPlugin;
//# sourceMappingURL=filemanager.js.map