"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerminalPlugin = void 0;
const engine_1 = require("@remixproject/engine");
const vscode_1 = require("vscode");
function getOptions(params = {}) {
    return Object.assign({ open: true }, params);
}
class TerminalPlugin extends engine_1.Plugin {
    constructor() {
        super({ name: 'terminal', methods: ['write', 'exec', 'open', 'kill'] });
        // Terminals (stdin) created during activation 
        this.terminals = {};
        // Outputs (stdout) created during activation
        this.outputs = {};
    }
    onDeactivation() {
        Object.values(this.terminals).forEach(terminal => terminal.dispose());
        this.terminals = {};
        Object.values(this.outputs).forEach(output => output.dispose());
        this.outputs = {};
    }
    get active() {
        return vscode_1.window.activeTerminal;
    }
    getTerminal(name) {
        if (name) {
            const terminal = vscode_1.window.terminals.find(terminal => terminal.name === name);
            if (!terminal) {
                return this.terminals[name] = vscode_1.window.createTerminal(name);
            }
            return terminal || vscode_1.window.createTerminal(name);
        }
        return this.active;
    }
    getOutput(name) {
        var _a, _b;
        name = (_a = name !== null && name !== void 0 ? name : this.activeOutput) !== null && _a !== void 0 ? _a : 'plugin-engine';
        return (_b = this.outputs[name]) !== null && _b !== void 0 ? _b : vscode_1.window.createOutputChannel(name);
    }
    /** Open specific terminal (doesn't work with output) */
    open(name) {
        const terminal = this.getTerminal(name);
        terminal.show(true);
        return terminal.name;
    }
    /** Kill a terminal */
    kill(name) {
        var _a;
        if (name) {
            (_a = vscode_1.window.terminals.find(terminal => terminal.name === name)) === null || _a === void 0 ? void 0 : _a.dispose();
            if (this.terminals[name]) {
                delete this.terminals[name];
            }
        }
        else {
            vscode_1.window.activeTerminal.dispose();
        }
    }
    /** Write on the current terminal and execute command */
    exec(command, options) {
        const opts = getOptions(options);
        const terminal = opts.name ? this.getTerminal(opts.name) : this.active;
        if (opts.open) {
            terminal.show(true);
        }
        terminal.sendText(command);
    }
    /** Write on the current output */
    write(text, options) {
        const opts = getOptions(options);
        const output = this.getOutput(opts.name);
        this.activeOutput = output.name;
        if (opts.open) {
            output.show(true);
        }
        output.appendLine(text);
    }
}
exports.TerminalPlugin = TerminalPlugin;
//# sourceMappingURL=terminal.js.map