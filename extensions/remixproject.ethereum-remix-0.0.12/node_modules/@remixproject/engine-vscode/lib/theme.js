"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThemePlugin = exports.getVscodeTheme = void 0;
const engine_1 = require("@remixproject/engine");
const plugin_api_1 = require("@remixproject/plugin-api");
const vscode_1 = require("vscode");
// There is no way to get the value from the theme so the best solution is to reference the css varibles in webview
function getVscodeTheme(color, urls = {}) {
    const brightness = color.kind === vscode_1.ColorThemeKind.Dark ? 'dark' : 'light';
    return {
        brightness,
        colors: {
            surface: 'var(--vscode-tab-inactiveBackground)',
            background: 'var(--vscode-sidebar-background)',
            foreground: 'var(--vscode-sideBar-foreground)',
            primary: 'var(--vscode-button-background)',
            primaryContrast: 'var(--vscode-button-foreground)',
            secondary: 'var(--vscode-button-secondaryBackground)',
            secondaryContrast: 'var(--vscode-button-secondaryForeground)',
            success: 'var(--vscode-button-background)',
            successContrast: 'var(--vscode-button-foreground)',
            warn: 'var(--vscode-inputValidation-warningBackground)',
            warnContrast: 'var(--vscode-inputValidation-warningForeground)',
            error: 'var(--vscode-inputValidation-errorBackground)',
            errorContrast: 'var(--vscode-inputValidation-errorForeground)',
            disabled: 'var(--vscode-debugIcon-breakpointDisabledForeground)',
        },
        breakpoints: {
            xs: 0,
            sm: 600,
            md: 1024,
            lg: 1440,
            xl: 1920
        },
        fontFamily: 'Segoe WPC,Segoe UI,sans-serif',
        space: 1,
        url: urls[brightness]
    };
}
exports.getVscodeTheme = getVscodeTheme;
class ThemePlugin extends engine_1.Plugin {
    constructor(options = {}) {
        super(plugin_api_1.themeProfile);
        this.getTheme = getVscodeTheme;
        super.setOptions(options);
    }
    setOptions(options) {
        super.setOptions(options);
    }
    onActivation() {
        this.listener = vscode_1.window.onDidChangeActiveColorTheme(color => {
            this.emit('themeChanged', this.getTheme(color, this.options.urls));
        });
    }
    onDeactivation() {
        this.listener.dispose();
    }
    currentTheme() {
        return this.getTheme(vscode_1.window.activeColorTheme, this.options.urls);
    }
}
exports.ThemePlugin = ThemePlugin;
//# sourceMappingURL=theme.js.map