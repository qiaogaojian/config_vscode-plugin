"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWebview = exports.WebviewPlugin = void 0;
const tslib_1 = require("tslib");
const engine_1 = require("@remixproject/engine");
const vscode_1 = require("vscode");
const path_1 = require("path");
const fs_1 = require("fs");
const url_1 = require("url");
class WebviewPlugin extends engine_1.PluginConnector {
    constructor(profile, options) {
        super(profile);
        this.listeners = [];
        options.engine = 'vscode';
        this.setOptions(options);
    }
    setOptions(options) {
        super.setOptions(options);
    }
    send(message) {
        var _a;
        (_a = this.panel) === null || _a === void 0 ? void 0 : _a.webview.postMessage(message);
    }
    connect(url) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.options.context) {
                this.panel = yield createWebview(this.profile, url, this.options);
                this.listeners = [
                    this.panel.webview.onDidReceiveMessage(msg => this.getMessage(msg)),
                    this.panel.onDidDispose(_ => this.call('manager', 'deactivatePlugin', this.name)),
                    this.panel,
                ];
            }
            else {
                throw new Error(`WebviewPlugin "${this.name}" `);
            }
        });
    }
    getMessage(message) {
        const _super = Object.create(null, {
            getMessage: { get: () => super.getMessage }
        });
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (message.action == 'emit' && message.payload.href) {
                vscode_1.env.openExternal(vscode_1.Uri.parse(message.payload.href));
            }
            else
                _super.getMessage.call(this, message);
        });
    }
    disconnect() {
        this.listeners.forEach(disposable => disposable.dispose());
    }
}
exports.WebviewPlugin = WebviewPlugin;
function isHttpSource(protocol) {
    return protocol === 'https:' || protocol === 'http:';
}
/** Create a webview */
function createWebview(profile, url, options) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { protocol, path } = url_1.parse(url);
        const isRemote = isHttpSource(protocol);
        if (isRemote) {
            return yield getWebviewContent(url, profile, options);
        }
        else {
            const relativeTo = options.relativeTo || 'extension';
            let fullPath;
            if (path_1.isAbsolute(path)) {
                fullPath = path;
            }
            else if (relativeTo === 'extension') {
                const { extensionPath } = options.context;
                fullPath = path_1.join(extensionPath, path);
            }
            else if (relativeTo === 'workspace') {
                const root = (_a = vscode_1.workspace.workspaceFolders[0]) === null || _a === void 0 ? void 0 : _a.uri.fsPath;
                if (!root) {
                    throw new Error('No open workspace. Cannot find url of relative path: ' + path);
                }
                fullPath = path_1.join(root, path);
            }
            return localHtml(fullPath, profile, options);
        }
    });
}
exports.createWebview = createWebview;
///////////////
// LOCAL URL //
///////////////
/** Create panel webview based on local HTML source */
function localHtml(url, profile, options) {
    var _a;
    const { ext } = path_1.parse(url);
    const baseUrl = ext === '.html' ? path_1.parse(url).dir : url;
    const panel = vscode_1.window.createWebviewPanel(profile.name, profile.displayName || profile.name, options.column || ((_a = vscode_1.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.viewColumn) || vscode_1.ViewColumn.One, {
        enableScripts: true,
        localResourceRoots: [vscode_1.Uri.file(baseUrl)]
    });
    setLocalHtml(panel.webview, baseUrl);
    // Devmode
    if (options.devMode) {
        const index = path_1.join(baseUrl, 'index.html');
        fs_1.watch(index).on('change', _ => setLocalHtml(panel.webview, baseUrl));
    }
    return panel;
}
/** Get code from local source */
function setLocalHtml(webview, baseUrl) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const index = `${baseUrl}/index.html`;
        // Get all links from "src" & "href"
        const matchLinks = /(href|src)="([^"]*)"/g;
        // Vscode requires URI format from the extension root to work
        const toUri = (original, prefix, link) => {
            // For: <base href="#" /> && remote url : <link href="https://cdn..."/>
            const isRemote = isHttpSource(url_1.parse(link).protocol);
            if (link === '#' || isRemote) {
                return original;
            }
            // For scripts & links
            const path = path_1.join(baseUrl, link);
            const uri = vscode_1.Uri.file(path);
            return `${prefix}="${webview['asWebviewUri'](uri)}"`;
        };
        const html = yield fs_1.promises.readFile(index, 'utf-8');
        webview.html = html.replace(matchLinks, toUri);
    });
}
///////////////
// REMOTE URL //
///////////////
function getWebviewContent(url, profile, options) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // Use asExternalUri to get the URI for the web server
        const uri = vscode_1.Uri.parse(url);
        const serverUri = yield vscode_1.env.asExternalUri(uri);
        // Create the webview
        const panel = vscode_1.window.createWebviewPanel(profile.name, profile.displayName || profile.name, options.column || ((_a = vscode_1.window.activeTextEditor) === null || _a === void 0 ? void 0 : _a.viewColumn) || vscode_1.ViewColumn.One, {
            enableScripts: true
        });
        const cspSource = panel.webview.cspSource;
        const content = {
            'default-src': `none 'unsafe-inline'`,
            'frame-src': `${serverUri} ${cspSource} https`,
            'img-src': `${cspSource} https:`,
            'script-src': `${cspSource} ${serverUri} 'unsafe-inline'`,
            'style-src': `${cspSource} ${serverUri} 'unsafe-inline'`,
        };
        const contentText = Object.entries(content).map(([key, value]) => `${key} ${value}`).join(';');
        panel.webview.html = `
    <!DOCTYPE html>
    <head>
      <meta http-equiv="Content-Security-Policy" content="${contentText}" />
    </head>
    <body  style='padding:0px; position:absolute; width:100%; height:100%;'>
    </body>

    <script>
      const vscode = acquireVsCodeApi();
      const pframe = document.createElement('iframe')
      // forward messages

        window.addEventListener('paste', function (evt) {
            pframe.contentWindow.postMessage({action:"paste", data:evt.clipboardData.getData('text/plain')},'${serverUri}');
        });

        window.addEventListener('copy', function (evt) {
            pframe.contentWindow.postMessage({action:"copy"},'${serverUri}');
        });  

        window.addEventListener('message', event => {
            if (event.origin.indexOf('vscode-webview:')>-1) {
                // Else extension -> webview
                pframe.contentWindow.postMessage(event.data, '${serverUri}');
            } else {
                // If iframe -> webview
                if(event.data.action == 'keydown'){
                    // incoming keyboard event
                    if(navigator.platform.toLowerCase().indexOf('mac') === 0)
                        window.dispatchEvent(new KeyboardEvent('keydown', event.data));
                }else if(event.data.action == 'copy'){
                    // put data in clipboard
                    if(navigator.platform.toLowerCase().indexOf('mac') === 0){
                        navigator.permissions.query({name: "clipboard-write"}).then(result => {
                            if (result.state == "granted" || result.state == "prompt") {
                              navigator.clipboard.writeText(event.data.data)
                            }
                        });
                    }  
                }else{
                    // forward message to vscode extension
                    vscode.postMessage(event.data)
                }
            }
      });
      
      pframe.setAttribute('sandbox', 'allow-popups allow-scripts allow-same-origin allow-downloads allow-forms allow-top-navigation')
      pframe.setAttribute('seamless', 'true')
      pframe.src = '${serverUri}?r=${Math.random()}'
      pframe.setAttribute('id', 'plugin-${profile.name}')
      document.body.appendChild(pframe);
      pframe.setAttribute('style', 'height: 100%; width: 100%; border: 0px; display: block;')
    </script>
    </html>`;
        return panel;
    });
}
//# sourceMappingURL=webview.js.map