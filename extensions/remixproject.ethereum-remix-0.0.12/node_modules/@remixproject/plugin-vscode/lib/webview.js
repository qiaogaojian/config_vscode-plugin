"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createClient = exports.WebviewConnector = void 0;
const tslib_1 = require("tslib");
const plugin_1 = require("@remixproject/plugin");
/**
 * This Webview connector
 */
class WebviewConnector {
    constructor(options = {}) {
        this.options = options;
        this.isVscode = !!acquireVsCodeApi;
        this.source = this.isVscode ? acquireVsCodeApi() : window.parent;
    }
    /** Send a message to the engine */
    send(message) {
        if (this.isVscode) {
            this.source.postMessage(message);
        }
        else if (this.origin || plugin_1.isHandshake(message)) {
            const origin = this.origin || '*';
            this.source.postMessage(message, origin);
        }
    }
    /** Get messae from the engine */
    on(cb) {
        window.addEventListener('message', (event) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!event.source)
                return;
            if (!event.data)
                return;
            if (!plugin_1.isPluginMessage(event.data))
                return;
            // Support for iframe
            if (!this.isVscode) {
                const isGoodOrigin = yield plugin_1.checkOrigin(event.origin, this.options);
                if (!isGoodOrigin)
                    return console.warn('Origin provided is not allow in message', event);
                if (plugin_1.isHandshake(event.data)) {
                    this.origin = event.origin;
                    this.source = event.source;
                }
            }
            cb(event.data);
        }), false);
    }
}
exports.WebviewConnector = WebviewConnector;
/**
 * Connect a Webview plugin client to a web engine
 * @param client An optional websocket plugin client to connect to the engine.
 */
exports.createClient = (client = new plugin_1.PluginClient()) => {
    const c = client;
    const options = client.options;
    const connector = new WebviewConnector(options);
    plugin_1.connectClient(connector, c);
    plugin_1.applyApi(c);
    return client;
};
//# sourceMappingURL=webview.js.map