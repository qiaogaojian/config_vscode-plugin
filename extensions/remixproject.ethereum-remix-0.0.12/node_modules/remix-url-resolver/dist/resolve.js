"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RemixURLResolver = void 0;
var axios_1 = require("axios");
var RemixURLResolver = /** @class */ (function () {
    function RemixURLResolver() {
        this.previouslyHandled = {};
    }
    /**
    * Handle an import statement based on github
    * @params root The root of the github import statement
    * @params filePath path of the file in github
    */
    RemixURLResolver.prototype.handleGithubCall = function (root, filePath) {
        return __awaiter(this, void 0, void 0, function () {
            var req, response, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        req = 'https://api.github.com/repos/' + root + '/contents/' + filePath;
                        return [4 /*yield*/, axios_1.default.get(req)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, Buffer.from(response.data.content, 'base64').toString()];
                    case 2:
                        e_1 = _a.sent();
                        throw e_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
    * Handle an import statement based on http
    * @params url The url of the import statement
    * @params cleanURL
    */
    RemixURLResolver.prototype.handleHttp = function (url, _) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.get(url)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_2 = _a.sent();
                        throw e_2;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
    * Handle an import statement based on https
    * @params url The url of the import statement
    * @params cleanURL
    */
    RemixURLResolver.prototype.handleHttps = function (url, _) {
        return __awaiter(this, void 0, void 0, function () {
            var response, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, axios_1.default.get(url)];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 2:
                        e_3 = _a.sent();
                        throw e_3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    RemixURLResolver.prototype.handleSwarm = function (url, cleanURL) {
        return;
    };
    /**
    * Handle an import statement based on IPFS
    * @params url The url of the IPFS import statement
    */
    RemixURLResolver.prototype.handleIPFS = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var req, response, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // replace ipfs:// with /ipfs/
                        url = url.replace(/^ipfs:\/\/?/, 'ipfs/');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        req = 'https://gateway.ipfs.io/' + url;
                        return [4 /*yield*/, axios_1.default.get(req)];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, response.data];
                    case 3:
                        e_4 = _a.sent();
                        throw e_4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    RemixURLResolver.prototype.getHandlers = function () {
        var _this = this;
        return [
            {
                type: 'github',
                match: function (url) { return /^(https?:\/\/)?(www.)?github.com\/([^/]*\/[^/]*)\/(.*)/.exec(url); },
                handle: function (match) { return _this.handleGithubCall(match[3], match[4]); }
            },
            {
                type: 'http',
                match: function (url) { return /^(http?:\/\/?(.*))$/.exec(url); },
                handle: function (match) { return _this.handleHttp(match[1], match[2]); }
            },
            {
                type: 'https',
                match: function (url) { return /^(https?:\/\/?(.*))$/.exec(url); },
                handle: function (match) { return _this.handleHttps(match[1], match[2]); }
            },
            {
                type: 'swarm',
                match: function (url) { return /^(bzz-raw?:\/\/?(.*))$/.exec(url); },
                handle: function (match) { return _this.handleSwarm(match[1], match[2]); }
            },
            {
                type: 'ipfs',
                match: function (url) { return /^(ipfs:\/\/?.+)/.exec(url); },
                handle: function (match) { return _this.handleIPFS(match[1]); }
            }
        ];
    };
    RemixURLResolver.prototype.resolve = function (filePath, customHandlers) {
        return __awaiter(this, void 0, void 0, function () {
            var imported, builtinHandlers, handlers, matchedHandler, handler, match, content;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        imported = this.previouslyHandled[filePath];
                        if (imported) {
                            return [2 /*return*/, imported];
                        }
                        builtinHandlers = this.getHandlers();
                        handlers = customHandlers ? __spreadArrays(builtinHandlers, customHandlers) : __spreadArrays(builtinHandlers);
                        matchedHandler = handlers.filter(function (handler) { return handler.match(filePath); });
                        handler = matchedHandler[0];
                        match = handler.match(filePath);
                        return [4 /*yield*/, handler.handle(match)];
                    case 1:
                        content = _a.sent();
                        imported = {
                            content: content,
                            cleanURL: filePath,
                            type: handler.type
                        };
                        this.previouslyHandled[filePath] = imported;
                        return [2 /*return*/, imported];
                }
            });
        });
    };
    return RemixURLResolver;
}());
exports.RemixURLResolver = RemixURLResolver;
//# sourceMappingURL=resolve.js.map