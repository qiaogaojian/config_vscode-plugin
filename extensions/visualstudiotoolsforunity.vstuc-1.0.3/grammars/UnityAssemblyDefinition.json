{
  "scopeName": "source.asmdef.unity",
  "name": "UnityAssemblyDefinition",
  "foldingStartMarker": "(?x)       # turn on extended mode\r\n  ^        # a line beginning with\r\n  \\s*      # some optional space\r\n  [{\\[]    # the start of an object or array\r\n  (?!      # but not followed by\r\n    .*     # whatever\r\n    [}\\]]  # and the close of an object or array\r\n    ,?     # an optional comma\r\n    \\s*    # some optional space\r\n    $      # at the end of the line\r\n  )\r\n  |        # ...or...\r\n  [{\\[]    # the start of an object or array\r\n  \\s*      # some optional space\r\n  $        # at the end of the line",
  "foldingStopMarker": "(?x)     # turn on extended mode\r\n  ^      # a line beginning with\r\n  \\s*    # some optional space\r\n  [}\\]]  # and the close of an object or array",
  "keyEquivalent": "^~J",
  "patterns": [
    {
      "include": "#value"
    }
  ],
  "repository": {
    "array": {
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.array.begin.asmdef"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.array.end.asmdef"
        }
      },
      "name": "meta.structure.array.asmdef",
      "patterns": [
        {
          "include": "#value"
        },
        {
          "match": ",",
          "name": "punctuation.separator.array.asmdef"
        },
        {
          "match": "[^\\s\\]]",
          "name": "invalid.illegal.expected-array-separator.asmdef"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "begin": "/\\*\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.asmdef"
            }
          },
          "end": "\\*/",
          "name": "comment.block.documentation.asmdef"
        },
        {
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.asmdef"
            }
          },
          "end": "\\*/",
          "name": "comment.block.asmdef"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.asmdef"
            }
          },
          "match": "(//).*$\\n?",
          "name": "comment.line.double-slash.js"
        }
      ]
    },
    "constant": {
      "match": "\\b(?:true|false|null)\\b",
      "name": "constant.language.asmdef"
    },
    "number": {
      "match": "(?x)        # turn on extended mode\r\n  -?        # an optional minus\r\n  (?:\r\n    0       # a zero\r\n    |       # ...or...\r\n    [1-9]   # a 1-9 character\r\n    \\d*     # followed by zero or more digits\r\n  )\r\n  (?:\r\n    (?:\r\n      \\.    # a period\r\n      \\d+   # followed by one or more digits\r\n    )?\r\n    (?:\r\n      [eE]  # an e character\r\n      [+-]? # followed by an option +/-\r\n      \\d+   # followed by one or more digits\r\n    )?      # make exponent optional\r\n  )?        # make decimal portion optional",
      "name": "constant.numeric.asmdef"
    },
    "object": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.begin.asmdef"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.dictionary.end.asmdef"
        }
      },
      "name": "meta.structure.dictionary.asmdef",
      "patterns": [
        {
          "comment": "the JSON object key",
          "include": "#objectkey"
        },
        {
          "include": "#comments"
        },
        {
          "begin": ":",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.dictionary.key-value.asmdef"
            }
          },
          "end": "(,)|(?=\\})",
          "endCaptures": {
            "1": {
              "name": "punctuation.separator.dictionary.pair.asmdef"
            }
          },
          "name": "meta.structure.dictionary.value.asmdef",
          "patterns": [
            {
              "comment": "the JSON object value",
              "include": "#value"
            },
            {
              "match": "[^\\s,]",
              "name": "invalid.illegal.expected-dictionary-separator.asmdef"
            }
          ]
        },
        {
          "match": "[^\\s\\}]",
          "name": "invalid.illegal.expected-dictionary-separator.asmdef"
        }
      ]
    },
    "string": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.asmdef"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.asmdef"
        }
      },
      "name": "string.quoted.double.asmdef",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "objectkey": {
      "begin": "\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.begin.asmdef"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.support.type.property-name.end.asmdef"
        }
      },
      "name": "support.type.property-name.asmdef",
      "patterns": [
        {
          "include": "#stringcontent"
        }
      ]
    },
    "stringcontent": {
      "patterns": [
        {
          "match": "(?x)                # turn on extended mode\r\n  \\\\                # a literal backslash\r\n  (?:               # ...followed by...\r\n    [\"\\\\/bfnrt]     # one of these characters\r\n    |               # ...or...\r\n    u               # a u\r\n    [0-9a-fA-F]{4}) # and four hex digits",
          "name": "constant.character.escape.asmdef"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.unrecognized-string-escape.asmdef"
        }
      ]
    },
    "value": {
      "patterns": [
        {
          "include": "#constant"
        },
        {
          "include": "#number"
        },
        {
          "include": "#string"
        },
        {
          "include": "#array"
        },
        {
          "include": "#object"
        },
        {
          "include": "#comments"
        }
      ]
    }
  }
}